import { SpotifyService } from 'src/apis/spotify/spotify.service';
import { User } from 'src/entities/user.entity';
import { Repository } from 'typeorm';
import { Campaign } from 'src/entities/campaign.entity';
import { Rescue } from 'src/entities/rescue.entity';
import { RecentlyPlayeds } from 'src/entities/recently-playeds.entity';
import { CashBack } from 'src/entities/cash-backs.entity';
import { Statement } from 'src/entities/statement.entity';
import { Quest } from 'src/entities/quest.entity';
import { QuestSpotifyPlaylists } from 'src/entities/quest-spotify-playlists.entity';
import { UserQuestSpotifyPlaylist } from 'src/entities/user-quest-spotify-playlists.entity';
import { Queue } from 'bull';
export declare class RecentlyPlayedJob {
    private userRepository;
    private campaignRepository;
    private rescueRepository;
    private recentlyRepository;
    private cashBackRepository;
    private statementRepository;
    private questRepository;
    private userQuestSpotifyRepository;
    private spotifyService;
    private recentlyQueue;
    constructor(userRepository: Repository<User>, campaignRepository: Repository<Campaign>, rescueRepository: Repository<Rescue>, recentlyRepository: Repository<RecentlyPlayeds>, cashBackRepository: Repository<CashBack>, statementRepository: Repository<Statement>, questRepository: Repository<Quest>, userQuestSpotifyRepository: Repository<UserQuestSpotifyPlaylist>, spotifyService: SpotifyService, recentlyQueue: Queue);
    handleCron(): Promise<void>;
    runJob(users: User[]): Promise<void>;
    loadUsers(): Promise<User[]>;
    loadLastTimeVerify(user: any): Promise<any>;
    loadCampaign(): Promise<Campaign>;
    loadRescues(): Promise<Rescue[]>;
    updateUser(user: User, recently: any): Promise<void>;
    getLastHeardTime(recently: any): Date;
    sleep(milliseconds: any): void;
    prepareRecentlyPlayed(recently: any): {
        cursors: any;
        next: any;
        items: any;
    };
    getLimits(cashbacks: CashBack[], rescues: Rescue[]): any[];
    getYesterday(): string;
    saveRecentlyPlaylist(user: User, recently: any): Promise<void>;
    loadSpotifyPlaylistQuests(): Promise<QuestSpotifyPlaylists[]>;
    loadUserQuestSpotifyPlaylists(user: User, questSpotifyPlaylist: QuestSpotifyPlaylists[]): Promise<UserQuestSpotifyPlaylist[]>;
    saveCashBacks(user: User, rescues: Rescue[], recently: any, campaign: Campaign, questSpotifyPlaylist: QuestSpotifyPlaylists[]): Promise<void>;
    buildCashBack(cb: any, user: User): CashBack;
    buildStatement(cb: any, user: User, campaign: Campaign): Statement;
}
